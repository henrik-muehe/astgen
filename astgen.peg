%{
#include <cstdio>
#include <iostream>
#include <ostream>
#include <memory>
#include <vector>
#include <string>
#include <ctemplate/template.h>

template<typename T, typename ...Args>
std::unique_ptr<T> make_unique( Args&& ...args )
{
    return std::unique_ptr<T>( new T( std::forward<Args>(args)... ) );
}

#include "ast.hpp"

using namespace std;

auto& out = cout;
#define YYSTYPE std::unique_ptr<Ast>
#define YY_CTYPE Collection
#define YY_CTYPE_DEFINITION() ;

static bool simpleType(std::string tn) {
  return (tn=="bool"||tn=="string"||tn=="int64_t");
}

void generateForwards(const std::vector<std::unique_ptr<Node>>& nodes) {
  cout << "// Forward declarations" << endl;
  for (auto& nodePtr : nodes) {
    Node& node=*reinterpret_cast<Node*>(nodePtr.get());    
    out << "struct "<<node.name->id<<";" << endl;
  }
  cout << endl;
}

void generateVisitor(const std::vector<std::unique_ptr<Node>>& nodes) {
  out << "// Visitor base class" << endl;
  out << "struct Visitor {" << endl;
  out << "  virtual void visitPre(const std::string& name,const Ast&) {}" << endl;
  out << "  virtual void visitPost(const std::string& name,const Ast&) {}" << endl;
  out << "  virtual void visitPre(const std::string& name,const Collection&) {}" << endl;
  out << "  virtual void visitPost(const std::string& name,const Collection&) {}" << endl;
  out << "  virtual void visit(const std::string& name,const int64_t&) {}" << endl;
  out << "  virtual void visit(const std::string& name,const std::string&) {}" << endl;
  out << "  virtual void collectionPre() {}" << endl;
  out << "  virtual void collectionPost() {}" << endl;
  for (auto& nodePtr : nodes) {
    Node& node=*reinterpret_cast<Node*>(nodePtr.get());
    
    out << "  virtual void visitPre(const std::string& name,const "<<node.name->id<<"&) {}" << endl;
    out << "  virtual void visitPost(const std::string& name,const "<<node.name->id<<"&) {}" << endl;
  }
  out << "};" << endl << endl;
}

static std::string rubyDefinitionTemplate = R"tpl(
{{#NODES}}	
class {{NODE_NAME}} < RenderStruct.new({{#ATTRS}}:{{ATTR_NAME}}{{#ATTRS_separator}},{{/ATTRS_separator}}{{/ATTRS}}); end
{{/NODES}}
)tpl"; //"

std::string generateRubyDefinition(const std::vector<std::unique_ptr<Node>>& nodes) {
  ctemplate::StringToTemplateCache("ast_ruby_def",rubyDefinitionTemplate.c_str(),ctemplate::STRIP_BLANK_LINES);
  
  ctemplate::TemplateDictionary dict("ruby def");
  for (auto& nodePtr : nodes) {
    Node& node=*reinterpret_cast<Node*>(nodePtr.get());
    
    auto nodeDict=dict.AddSectionDictionary("NODES");
    nodeDict->SetValue("NODE_NAME",node.name->id);

		if (node.attributes.empty()) {
	    auto attrDict=nodeDict->AddSectionDictionary("ATTRS");
	    attrDict->SetValue("ATTR_NAME","dummy");
		} else
		for (auto& attrPtr : node.attributes) {
	    Attribute& attr=*reinterpret_cast<Attribute*>(attrPtr.get());
	    auto attrDict=nodeDict->AddSectionDictionary("ATTRS");
	    attrDict->SetValue("ATTR_NAME",attr.name->id);
		}
  }
  
  string output;
  ctemplate::ExpandTemplate("ast_ruby_def",ctemplate::STRIP_BLANK_LINES,&dict,&output);
  return output;
}


static std::string rubyAstTemplate = R"tpl(
struct RubyAstVisitor : public Visitor {
	bool doComma;
   
   RubyAstVisitor() : doComma(false) {}
	
	std::string getDefinition() const {
		return R"(
			{{DEFINITION}}
		)";
	}
	
	void tryComma() {
		if (doComma) {
			std::cerr << "," << std::endl;
			doComma=false;
		}
	}
	
  void collectionPre() { 
		tryComma();
    std::cerr << "[";
		doComma=false;
  }
  
  void collectionPost() { 
    std::cerr << "]";
		doComma=true;
  }  
  
  {{#NODES}}
  virtual void visitPre(const std::string& name,const {{NODE_NAME}}& n) { 
		tryComma();
    std::cerr << "{{NODE_NAME}}.new(";
  }
  
  virtual void visitPost(const std::string& name,const {{NODE_NAME}}& n) { 
    std::cerr << ").line_col({{LINE}},{{COL}})";
		doComma=true;
  }  
  {{/NODES}}
  
  virtual void visit(const std::string& name,const int64_t& v) { tryComma(); std::cerr << v; }
  virtual void visit(const std::string& name,const std::string& v) { tryComma(); std::cerr << "\"" << v << "\""; }
};
)tpl"; //"

void generateRubyAstVisitor(const std::vector<std::unique_ptr<Node>>& nodes) {
	std::string def=generateRubyDefinition(nodes);
	ctemplate::StringToTemplateCache("ast_ruby_ast",rubyAstTemplate.c_str(),ctemplate::DO_NOT_STRIP);
  
  ctemplate::TemplateDictionary dict("ruby ast");
  dict.SetValue("DEFINITION",def);
	if (nodes.empty()) {
    auto nodeDict=dict.AddSectionDictionary("NODES");
    nodeDict->SetValue("NODE_NAME",":dummy");
	} else
  for (auto& nodePtr : nodes) {
    Node& node=*reinterpret_cast<Node*>(nodePtr.get());
    
    auto nodeDict=dict.AddSectionDictionary("NODES");
    nodeDict->SetValue("NODE_NAME",node.name->id);
    nodeDict->SetIntValue("LINE",node.line);
    nodeDict->SetIntValue("COL",node.col);
  }
  
  string output;
  ctemplate::ExpandTemplate("ast_ruby_ast",ctemplate::DO_NOT_STRIP,&dict,&output);
  out << output << endl;
}


static std::string prettyPrinterTemplate = R"tpl(
struct PrettyPrintVisitor : public Visitor {
  std::stack<bool> indentScopes;
  uint64_t indentDepth;
  
  void pushScope(bool indent=false) { indentScopes.push(indent); indentDepth+=indent; }
  void popScope() { indentDepth-=indentScopes.top(); indentScopes.pop(); }
  
  void applyIndent(int64_t mod=0) { 
    if (indentScopes.top()) { 
      std::cerr << std::string((indentDepth+mod)*2,' '); 
    } 
  }
  
  void applyNl() { 
    if (indentScopes.top()) 
      std::cerr << std::endl;
  }
  
  PrettyPrintVisitor() : indentDepth(0) { pushScope(); }
  
  void collectionPre() { 
    applyIndent();
    std::cerr << "[" << std::endl; 
    pushScope(true);
  }
  
  void collectionPost() { 
    applyIndent(-1); 
    popScope();
    std::cerr << "]";// << std::endl; 
  }  
  
  {{#NODE_VISITORS}}
  virtual void visitPre(const std::string& name,const {{NODE_NAME}}& n) { 
    applyIndent(); 
    std::cerr << "(" << "{{NODE_NAME}} " << name << "="; 
    pushScope();
  }
  
  virtual void visitPost(const std::string& name,const {{NODE_NAME}}& n) { 
    applyIndent();
    popScope();
    std::cerr << ")"; 
    applyNl(); 
  }  
  {{/NODE_VISITORS}}
  
  virtual void visit(const std::string& name,const int64_t& v) { std::cerr << "(" << name << "=" << "\"" << v << "\")"; }
  virtual void visit(const std::string& name,const std::string& v) { std::cerr << "(" << name << "=" << "\"" << v << "\")"; }
};
)tpl"; //"

void generatePrettyPrintVisitor(const std::vector<std::unique_ptr<Node>>& nodes) {
  ctemplate::StringToTemplateCache("ast_pretty_print",prettyPrinterTemplate.c_str(),ctemplate::DO_NOT_STRIP);
  
  ctemplate::TemplateDictionary dict("pretty printer");
  for (auto& nodePtr : nodes) {
    Node& node=*reinterpret_cast<Node*>(nodePtr.get());
    
    auto nodeDict=dict.AddSectionDictionary("NODE_VISITORS");
    nodeDict->SetValue("NODE_NAME",node.name->id);
  }
  
  string output;
  ctemplate::ExpandTemplate("ast_pretty_print",ctemplate::DO_NOT_STRIP,&dict,&output);
  out << output << endl;
}

void generate(Node& node) {
  // Struct
  out << "struct " << node.name->id << " : public Ast {" << endl;
  for (auto& a : node.attributes) {
    if (simpleType(a->type->id->id)) {
      out << "  " << a->type->id->id << " " << a->name->id << ";" << endl;
    } else if (a->type->collection) {
      out << "  std::vector<std::unique_ptr<" << a->type->id->id << ">> " << a->name->id << ";" << endl;
    } else {
      out << "  std::unique_ptr<" << a->type->id->id << "> " << a->name->id << ";" << endl;
    }
  }

  // Constructor signature
  out << endl;
  out << "  " << node.name->id << "(";
  bool first=true;
  for (auto& a : node.attributes) {      
    if (!first) out << ","; first=false;
    if (simpleType(a->type->id->id)) {
      out << "const "<< a->type->id->id << "& " << a->name->id;
    } else if (!a->type->collection) {
      out << "std::unique_ptr<Ast>&& " << a->name->id;
    } else {
      out << "std::unique_ptr<Ast>&& " << a->name->id;
    }
  }
  out << ") {" << endl;

  // Constructor body
  for (auto& a : node.attributes) {      
    if (simpleType(a->type->id->id)) {
      out << "    " << "this->" << a->name->id << "=" << a->name->id << ";" << endl;
    } else if (!a->type->collection) {
      out << "    " << "this->" << a->name->id << "=std::unique_ptr<" << a->type->id->id << ">(tryCast<" << a->type->id->id << "*>(" << a->name->id << ".get()));" << endl;
      out << "    " << a->name->id << ".release();" << endl;
      out << endl;
    } else {
      out << "    " << "if (" << a->name->id << ".get())" << endl;
      out << "    " << "for (auto& item : tryCast<Collection*>(" << a->name->id << ".get())->get()) {" << endl;
      out << "      " << "this->" << a->name->id << ".push_back(std::unique_ptr<"<< a->type->id->id <<">(tryCast<"<< a->type->id->id << "*>(item.get())));" << endl;
      out << "      " << "item.release();"<<endl;
      out << "    " << "}"<<endl;
    }
  }    
  out << "  }" << endl << endl;
  
  // Visitor accept
  out << "  " << "void accept(const std::string& name,Visitor& visitor) {" << endl;
  out << "    " << "visitor.visitPre(name,*this);" << endl;
  for (auto& a : node.attributes) {      
    if (simpleType(a->type->id->id)) {
      // We don't visit those right now
      out << "    " << "visitor.visit(\""<< a->name->id <<"\",this->" << a->name->id << ");" << endl;
    } else if (!a->type->collection) {
      out << "    " << "if (this->"<<a->name->id<<".get()) this->" << a->name->id << "->accept(\""<< a->name->id <<"\",visitor);" << endl;
    } else {
      out << "    " << "visitor.collectionPre();" << endl;
      out << "    " << "for (auto& item : " << a->name->id << ") {" << endl;
      out << "      " << "if (item.get()) item->accept(\""<< a->name->id <<"\",visitor);"<<endl;
      out << "    " << "}"<<endl;
      out << "    " << "visitor.collectionPost();" << endl;
    }
  }
  out << "    " << "visitor.visitPost(name,*this);" << endl;
  out << "  " << "}" << endl;
  
  // Struct close
  out << "};" << endl << endl;
  
  // ostream operator
  out << "std::ostream& operator<< (std::ostream& out,const " << node.name->id << "& node) {" << endl;
  out << "  " << "out << \"(" << node.name->id << ": \";" << endl;
  for (auto& a : node.attributes) {      
    if (a->type->collection) {
      out << "  out << \"[\";" << endl;
      out << "  " << "for (auto& item : node." << a->name->id << ") {" << endl;
      out << "    " << "out << *item;" << endl;
      out << "  " << "}" << endl;
      out << "  out << \"]\";" << endl;
    } else {
      if (simpleType(a->type->id->id)) {
        out << "  " << "out << node." << a->name->id << ";" << endl;
      } else {
        out << "  " << "out << *node." << a->name->id << ";" << endl;
      }
    }
  }  
  out << "  " << "out << \")\";" << endl;
  out << "}" << endl << endl << endl;
}

struct CompileVisitor : public Visitor {
  void visitPost(const std::string& name,const Nodes& node) {
    auto& n=node.nodes;

    out << "struct Visitor; struct Ast { int64_t line; int64_t col; virtual void can_dynamic_cast() {} virtual void accept(const std::string&,Visitor&)=0; };" << endl;
    out << "std::ostream& operator<< (std::ostream& out,const Ast& node) { out << \"(Ast)\"; }" << endl;
    out << "using std::string;" << endl << endl;
    out << "struct Collection : Ast {" <<endl;
    out << "  void accept(const string&, Visitor&) {};" << endl;
    out << "  std::vector<std::unique_ptr<Ast>> items; " << endl;
    out << "  void push_back(std::unique_ptr<Ast>&& item) { items.push_back(std::move(item)); } " << endl;
    out << "  std::vector<std::unique_ptr<Ast>>& get() { return items; }" << endl;
    out << "};" << endl << endl;
    out << "template<class T,class S>" << endl;
    out << "T tryCast(S s) {" << endl;
    out << "  if (!s) return 0;" << endl;
    out << "  T t=dynamic_cast<T>(s);" << endl;
    out << "  if (!t) {" << endl;
    out << "    std::cerr << \"AST type mismatch.\" << std::endl;" << endl;
    out << "    throw;" << endl;
    out << "  }" << endl;
    out << "  return t;" << endl;
    out << "}" << endl << endl;

    generateForwards(n); 
    generateVisitor(n); 
    for (auto& item : n) { 
      generate(*reinterpret_cast<Node*>(item.get())); 
    }
    generatePrettyPrintVisitor(n);
		generateRubyDefinition(n);
    generateRubyAstVisitor(n);
  }
};

%}

grammar = (- @n:astnode -)* !.              { $$ = make_unique<Nodes>(move(n)); }

id = <[a-zA-Z0-9_]+>                        { $$ = make_unique<Id>(yytext); }
type = ('[' - i:id - ']')                   { $$ = make_unique<Type>(move(i),true); }
     | i:id                                 { $$ = make_unique<Type>(move(i),false); }
attribute = - i:id - ':' - t:type -         { $$ = make_unique<Attribute>(move(i),move(t)); }
attribute_list = '(' - @a:attribute? - (',' - @a:attribute - )* - ')' { $$=move(a); }
astnode = i:id - a:attribute_list           { $$ = make_unique<Node>(move(i),move(a)); }

-             = comment | space
space         = [ \t\r\n]*
comment       = space '--' ([^\r\n])* [\r\n]* space


%%

int main()
{
  GREG g;
  GREG *G=&g;
  
  yyinit(G);
  if (!yyparse(G)) {
    // Find current line
    uint64_t line=1;
    for (uint64_t index=0;index<G->maxPos;++index) if (G->buf[index]=='\n') ++line;
    
    // Find previous newline distance
    uint64_t col=1;
    for (uint64_t index=G->maxPos;index>0&&G->buf[index]!='\n';++col,--index);
    
    // Delimit text with \0 at first newline after error
    for (uint64_t index=G->maxPos;;++index) {
      if (index>=G->limit&&(G->pos=index,!yyrefill(G))) break;
      if (!G->buf[index] || G->buf[index]=='\r' || G->buf[index]=='\n') {
        G->buf[index]=0;
        break;
      }
    }

    // Report error
    cerr << "Line " << line << ", column " << col << " ";
    cerr << "Can not parse: \"" << &G->buf[G->maxPos] << "\"" << endl;
  }

  CompileVisitor c;
  G->ss->accept("root",c);
  
  //PrettyPrintVisitor p; G->ss->accept("root",p); cerr << endl << endl << endl;
	
  //RubyAstVisitor r; G->ss->accept("root",r); cerr << endl << endl << endl;
  yydeinit(G);
  return 0;
}
